generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  member    Member?  @relation(fields: [memberId], references: [id])
  memberId  Int?     @unique
  role      Role     @relation(fields: [roleId], references: [id])  
  roleId    Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberRegistration {
  id                  Int                      @id @default(autoincrement())
  status              MemberRegistrationStatus @default(REVIEWING)
  fullName            String
  birthday            DateTime
  phoneNumber         String
  email               String
  address             String
  workPlace           String
  hasSocialActivities Boolean
  memories            String
  position            Position                 @relation(fields: [positionId], references: [id])
  positionId          Int
  hopeToReceive       String
  interviewTime       DateTime                 @default(now())
  linkGGmeet          String                   @default("https://meet.google.com/gmp-mnvm-obt")
  test                String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model DonorRegistration {
  id             Int            @id @default(autoincrement())
  fullName       String
  birthday       DateTime
  phoneNumber    String
  email          String
  kindOfDonation kindOfDonation
  donationImage  String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Event {
  id                Int              @id @default(autoincrement())
  title             String
  type              EventType     
  status            EventStatus      @default(UPCOMING)
  startDate         DateTime
  endDate           DateTime
  description       String
  location          String
  mapLink           String
  image             String
  // Các trường riêng cho sự kiện quyên góp
  goalAmount        Float?           // Chỉ dùng cho DONATION
  currentAmount     Float?           // Chỉ dùng cho DONATION
  // Quan hệ
  eventRegistrations EventRegistration[]
  eventResult       EventResult?
  donations         Donation[]       // Chỉ dùng cho DONATION
  postId            Int?            1-n: nhiều sự kiện có thể dùng chung 1 bài viết
  post              Post?            @relation(fields: [postId], references: [id])
}

model EventResult {
  id               Int    @id @default(autoincrement())
  event            Event  @relation(fields: [eventId], references: [id])
  eventId          Int    @unique
  totalDonation    Float
  totalParticipant Int
  summary          String
  totalHour        Float
  resultImages     String[]
  achievements     String[]
}

model Donation {
  id              Int    @id @default(autoincrement())
  amount          Float
  donorName       String
  donorEmail      String
  paymentMethod   String
  event           Event  @relation(fields: [eventId], references: [id])
  eventId         Int
  orderId         String   @unique
  createdAt       DateTime @default(now())
}

model EventRegistration {
  id        Int    @id @default(autoincrement())
  fullName  String
  birthday  DateTime
  phoneNumber String
  email     String
  address   String
  workPlace String
  event     Event  @relation(fields: [eventId], references: [id])
  eventId   Int
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  content     String   
  summary     String?  
  image       String?  
  author      String?  
  published   Boolean  @default(false)
  isHighlight Boolean  @default(false)
  events      Event[]  // 1-n: một bài viết có thể liên kết nhiều sự kiện
}

model Position {
  id                 Int                  @id @default(autoincrement())
  name               String
  memberRegistration MemberRegistration[]
  Member             Member[]
}

model Team {
  id     Int      @id @default(autoincrement())
  name   String
  Member Member[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       // Quan hệ 1-n với User
  permissions Permission[] // Quan hệ n-n với Permission
}


model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique   
  roles       Role[]           // Quan hệ n-n với Role
}

model Member {
  id          Int      @id @default(autoincrement())
  fullName    String
  birthday    DateTime
  phoneNumber String
  email       String
  address     String
  position    Position @relation(fields: [positionId], references: [id])
  positionId  Int
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      Int
  workPlace   String
  bank        String
  bankAccount String
  avatar      String
  User        User?
}

enum MemberRegistrationStatus {
  REVIEWING
  INTERVIEW
  PASSED
  FAILED
}

enum kindOfDonation {
  MONEY
  GOODS
}

enum EventStatus {
  UPCOMING
  ONGOING
  FINISHED
}

enum EventType {
  VOLUNTEER   // Sự kiện thiện nguyện
  DONATION    // Sự kiện quyên góp
}