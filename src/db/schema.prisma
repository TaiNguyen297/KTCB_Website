generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  member    Member?  @relation(fields: [memberId], references: [id])
  memberId  Int?     @unique
  role      Role     @relation(fields: [roleId], references: [id])  // Thêm quan hệ với Role
  roleId    Int      // Trường bắt buộc (không optional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberRegistration {
  id                  Int                      @id @default(autoincrement())
  status              MemberRegistrationStatus @default(REVIEWING)
  fullName            String
  birthday            DateTime
  phoneNumber         String
  email               String
  address             String
  workPlace           String
  hasSocialActivities Boolean
  memories            String
  position            Position                 @relation(fields: [positionId], references: [id])
  positionId          Int
  hopeToReceive       String
  interviewTime       DateTime                 @default(now())
  linkGGmeet          String                   @default("https://meet.google.com/gmp-mnvm-obt")
  test                String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model DonorRegistration {
  id             Int            @id @default(autoincrement())
  fullName       String
  birthday       DateTime
  phoneNumber    String
  email          String
  kindOfDonation kindOfDonation
  donationImage  String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Position {
  id                 Int                  @id @default(autoincrement())
  name               String
  memberRegistration MemberRegistration[]
  Member             Member[]
}

model Team {
  id     Int      @id @default(autoincrement())
  name   String
  Member Member[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       // Quan hệ 1-n với User
  permissions Permission[] // Quan hệ n-n với Permission
}


model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique   // Ví dụ: "CREATE_USER", "EDIT_POST"
  roles       Role[]           // Quan hệ n-n với Role
}

model Member {
  id          Int      @id @default(autoincrement())
  fullName    String
  birthday    DateTime
  phoneNumber String
  email       String
  address     String
  position    Position @relation(fields: [positionId], references: [id])
  positionId  Int
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      Int
  workPlace   String
  bank        String
  bankAccount String
  avatar      String
  User        User?
}

enum MemberRegistrationStatus {
  REVIEWING
  INTERVIEW
  PASSED
  FAILED
}

enum kindOfDonation {
  MONEY
  GOODS
}
