generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  member    Member?  @relation(fields: [memberId], references: [id])
  memberId  Int?     @unique
  role      Role     @relation(fields: [roleId], references: [id])  // Thêm quan hệ với Role
  roleId    Int      // Trường bắt buộc (không optional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberRegistration {
  id                  Int                      @id @default(autoincrement())
  status              MemberRegistrationStatus @default(REVIEWING)
  fullName            String
  birthday            DateTime
  phoneNumber         String
  email               String
  address             String
  workPlace           String
  hasSocialActivities Boolean
  memories            String
  position            Position                 @relation(fields: [positionId], references: [id])
  positionId          Int
  hopeToReceive       String
  interviewTime       DateTime                 @default(now())
  linkGGmeet          String                   @default("https://meet.google.com/gmp-mnvm-obt")
  test                String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model DonorRegistration {
  id             Int            @id @default(autoincrement())
  fullName       String
  birthday       DateTime
  phoneNumber    String
  email          String
  kindOfDonation kindOfDonation
  donationImage  String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model VolunteerEvents {
  id          Int               @id @default(autoincrement())
  title       String
  status      EventStatus       @default(UPCOMING)
  startDate   DateTime          // ✅ Thêm thời gian bắt đầu
  endDate     DateTime          // ✅ Thêm thời gian kết thúc
  description String
  location    String
  mapLink     String
  image       String
  eventRegistrations EventRegistration[]
  eventResult EventResult?      // ✅ Liên kết với kết quả sự kiện
}

model EventResult {
  id              Int              @id @default(autoincrement())
  event           VolunteerEvents  @relation(fields: [eventId], references: [id])
  eventId         Int              @unique
  totalDonation   Float            // Tổng số tiền/giá trị quyên góp
  totalParticipant Int             // Tổng số người tham gia
  summary         String           // Ghi chú kết quả sự kiện
  resultImages    String[]         // Mảng link ảnh kết quả sự kiện
}

model DonationEvent {
  id              Int              @id @default(autoincrement())
  title           String
  goalAmount      Float
  currentAmount   Float            @default(0)
  description     String
  startDate       DateTime
  endDate         DateTime
  image           String?
  donations       Donation[]       // Danh sách các lần quyên góp
}

model Donation {
  id              Int            @id @default(autoincrement())
  amount          Float
  donorName       String
  donorEmail      String
  paymentMethod   String         // Ví dụ: "Momo", "ZaloPay", "Chuyển khoản"
  donationEvent   DonationEvent @relation(fields: [donationEventId], references: [id])
  donationEventId Int
  createdAt       DateTime       @default(now())
}

model EventRegistration {
  id             Int            @id @default(autoincrement())
  fullName       String
  birthday       DateTime
  phoneNumber    String
  email          String
  address        String
  workPlace      String
  event          VolunteerEvents  @relation(fields: [eventId], references: [id])
  eventId        Int
}

model Position {
  id                 Int                  @id @default(autoincrement())
  name               String
  memberRegistration MemberRegistration[]
  Member             Member[]
}

model Team {
  id     Int      @id @default(autoincrement())
  name   String
  Member Member[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       // Quan hệ 1-n với User
  permissions Permission[] // Quan hệ n-n với Permission
}


model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique   // Ví dụ: "CREATE_USER", "EDIT_POST"
  roles       Role[]           // Quan hệ n-n với Role
}

model Member {
  id          Int      @id @default(autoincrement())
  fullName    String
  birthday    DateTime
  phoneNumber String
  email       String
  address     String
  position    Position @relation(fields: [positionId], references: [id])
  positionId  Int
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      Int
  workPlace   String
  bank        String
  bankAccount String
  avatar      String
  User        User?
}

enum MemberRegistrationStatus {
  REVIEWING
  INTERVIEW
  PASSED
  FAILED
}

enum kindOfDonation {
  MONEY
  GOODS
}

enum EventStatus {
  UPCOMING
  ONGOING
  FINISHED
}